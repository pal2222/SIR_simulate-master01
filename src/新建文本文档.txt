#include "network_sim.h"
#include <time.h>
#include <algorithm>
#include "json/json.h"

using namespace std;


Simulation::Simulation(Network& network, int iterTimes, int simTime)
	:network(network)
	,iter_times(iterTimes)
	,sim_times(simTime)
{
	//init the output file
	//mLogt.open("log_target.txt");
	//mFileOut.open("1target.csv");
	//mFotemp.open("tempdata_target.csv");
	//mStore.resize(mIterTimes);
	//mSumInfectThisDay.resize(mSimTime);
	/*for (int i = 0; i < mSumInfectThisDay.size(); i++)
	{
		mSumInfectThisDay[i] = 0;
	}*/
	out_detail.open("detail.csv");
	mStore.resize(iter_times);
	for (int i = 0; i < mStore.size(); i++)
	{
		mStore[i].resize(sim_times);
		for (int j = 0; j < mStore[i].size(); j++)
		{
			mStore[i][j].resize(3);
		}
	}
	set_initial_network("hk_facebook.json");
}

void Simulation::set_initial_network(string input_file)
{
	ifstream ifs;
	ifs.open(input_file);
	Json::Value value, nodeValue, edgeValue;
	Json::Reader jsonReader;
	out_detail.clear();
	//parse json file
	if (jsonReader.parse(ifs, value))
	{
		cout << "nodesize:" << value["nodes"].size() << endl;
		for (unsigned int i = 0; i < value["nodes"].size(); i++)
		{
			nodeValue = value["nodes"][i];
			Node node;
			//parse json
			//Node id
			string tmp = nodeValue["nid"].asString();
			node.id = atoi(tmp.c_str());
			//Node name
			double tmp1 = nodeValue["nodeName"].asDouble();
			node.nodeName = to_string(tmp1);
			//Node immunology
			node.Immunology = nodeValue["Immunology"].asInt();
			//Node actived
			string tmp2 =  nodeValue["actived"].asString();
			if (tmp2 == "false")
				node.actived = false;
			else if (tmp2 == "true")
				node.actived = true;
			// add node to network
			if (!network.check_agent(node.id))
			{
				create_agent(node.id,node.nodeName);
				if (node.Immunology == 1)
				{
					// if Immunology == 1 ,it means the node is R
					network[node.id].agent_emotion = POSITIVE;
				}
				if (node.actived == true)
				{
					network[node.id].actived = true;
				}
			}
		}
		//parse edges
		std::cout << "edgesize:" << value["edges"].size() << endl;
		for (unsigned int j = 0; j < value["edges"].size();j++)
		{
			edgeValue = value["edges"][j];
			double prob = edgeValue["probability"].asDouble();
			int startPoint = edgeValue["startPoint"].asUInt();
			int endPoint = edgeValue["endPoint"].asUInt();
			network.agents.find(endPoint)->second.follower_set.add(network.agents.find(startPoint)->second, prob);
			network.agents.find(endPoint)->second.following_set.add(startPoint);
			network.agents.find(startPoint)->second.follower_set.add(network.agents.find(endPoint)->second, prob);
			network.agents.find(startPoint)->second.following_set.add(endPoint);
			
		}
	}
}

bool Simulation::create_agent(int id,string name)
{
	Agent e;
	e.id = id;
	e.name = name;
	e.agent_emotion = NEUTRAL;
	network.agents.insert(pair<int, Agent>(e.id, e));
	return true;
}

void Simulation::run_simulation_no_method()
{
	srand(time(0));
	for (int tms = 0; tms < iter_times; tms++)
	{
		std::cout << "Times:" << tms << endl;
		bool immucontrol;
		for (int imtime = 0; imtime < sim_times; imtime++)
		{
			for (auto& iter = network.agents.begin(); iter!=network.agents.end(); iter++)
			{
				Agent& e = (*iter).second;
				if (e.actived == true)
				{
					for (int j = 0; j < e.follower_set.size();j++)
					{
						if (rand() / (RAND_MAX + 1.f) < e.follower_set.followers[j].prob)
						{
							Agent& follower = network[e.follower_set.followers[j].id];
							if (follower.actived == false)
							{
								if (rand() / (RAND_MAX + 1.f) < e.follower_set.followers[j].prob)
								{
									follower.actived = true;
									float rng = rand() / (RAND_MAX + 1.f);
									if (rng >= 0 && rng < 0.185)
										follower.agent_emotion = NEUTRAL;
									else if ( 0.185 <= rng && rng < 0.75)
										follower.agent_emotion = NEGATIVE;
									else if ( 0.75 <= rng && rng < 1)
										follower.agent_emotion = POSITIVE;
								}
							}
						}
					}
				}
			}
			int n_neutral = 0, n_positive = 0, n_negative = 0;
			//统计每次sim迭代结束后，三种节点的数量
			for (auto& iter = network.agents.begin();iter!=network.agents.end(); iter++)
			{

				if ((*iter).second.agent_emotion == NEUTRAL)
					mStore[tms][imtime][0]++;
				else if ((*iter).second.agent_emotion == POSITIVE)
					mStore[tms][imtime][1]++;
				else if ((*iter).second.agent_emotion == NEGATIVE)
					mStore[tms][imtime][2]++;
			}
		}
	}
	int n_actived = 0;
	for (auto& iter = network.agents.begin();iter != network.agents.end(); iter++)
	{
		if ((*iter).second.actived == true)
			n_actived++;
	}
	cout << "actived node:" << n_actived << endl;
	out_detail << "NAGETIVE" << "," << "POSITIVE" << "," << "NEUTRAL" << "," << endl;
	for(int i = 0 ; i < mStore.size() ; i++)
		for (int j = 0; j < mStore[i].size();j++)
		{
			out_detail << mStore[i][j][2] << ",";
			out_detail << mStore[i][j][1] << ",";
			out_detail << mStore[i][j][0] << endl;
		}

}

void Simulation::run_simulation_method1(float prob_1,float prob_2)
{

}